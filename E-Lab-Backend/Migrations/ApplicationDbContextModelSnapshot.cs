// <auto-generated />
using System;
using E_Lab_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Lab_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Lab_Backend.Models.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("E_Lab_Backend.Models.TestResultAdmin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("IgA")
                        .HasColumnType("real");

                    b.Property<string>("IgAResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IgG")
                        .HasColumnType("real");

                    b.Property<float>("IgG1")
                        .HasColumnType("real");

                    b.Property<string>("IgG1Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IgG2")
                        .HasColumnType("real");

                    b.Property<string>("IgG2Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IgG3")
                        .HasColumnType("real");

                    b.Property<string>("IgG3Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IgG4")
                        .HasColumnType("real");

                    b.Property<string>("IgG4Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IgGResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IgM")
                        .HasColumnType("real");

                    b.Property<string>("IgMResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("TestResultsAdmin");
                });

            modelBuilder.Entity("E_Lab_Backend.Models.TestResultPatient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("IgA")
                        .HasColumnType("real");

                    b.Property<string>("IgAResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IgG")
                        .HasColumnType("real");

                    b.Property<float>("IgG1")
                        .HasColumnType("real");

                    b.Property<string>("IgG1Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IgG2")
                        .HasColumnType("real");

                    b.Property<string>("IgG2Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IgG3")
                        .HasColumnType("real");

                    b.Property<string>("IgG3Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IgG4")
                        .HasColumnType("real");

                    b.Property<string>("IgG4Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IgGResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IgM")
                        .HasColumnType("real");

                    b.Property<string>("IgMResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("TestResultsPatient");
                });

            modelBuilder.Entity("E_Lab_Backend.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("E_Lab_Backend.Models.RefreshToken", b =>
                {
                    b.HasOne("E_Lab_Backend.Models.UserModel", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("E_Lab_Backend.Models.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Lab_Backend.Models.TestResultAdmin", b =>
                {
                    b.HasOne("E_Lab_Backend.Models.UserModel", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Lab_Backend.Models.TestResultPatient", b =>
                {
                    b.HasOne("E_Lab_Backend.Models.UserModel", "Patient")
                        .WithMany("PatientTestResults")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Lab_Backend.Models.UserModel", b =>
                {
                    b.Navigation("PatientTestResults");

                    b.Navigation("RefreshToken");
                });
#pragma warning restore 612, 618
        }
    }
}
